# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
# Put legend right of plot
legend.position = "right")
# Create a character vector of node names sorted by their
# community membership. Here, I rearrange the node_list
# table by the "comm" variable, then extract the
# "name" vector
name_order <- (node_list %>% arrange(comm))$name
# Reorder edge_list "from" and "to" factor levels based on
# this new name_order
plot_data <- edge_list %>% mutate(
to = factor(to, levels = name_order),
from = factor(from, levels = name_order))
# Now run the ggplot code again
# Override group variable
plot_data$Level <- c("1", "1", "1", "1", "1", "1", "1", "1", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4")
edge_list$Level <- plot_data$Level
# Create a character vector of node names sorted by their
# group membership. Here, I rearrange the node_list
# table by the "Group" variable, then extract the
# "name" vector
name_order <- (node_list %>% arrange(Level))$name
# Reorder edge_list "from" and "to" factor levels based on
# this new name_order
plot_data <- edge_list %>% mutate(
to = factor(to, levels = name_order),
from = factor(from, levels = name_order))
# Now run the d3heatmap
d3heatmap(get.adjacency(graph), dendrogram = 'none', symm = TRUE,
cexRow = 0.7, cexCol = 0.7, colors = "Blues")
help("d3heatmap")
# Now run the d3heatmap
d3heatmap(get.adjacency(graph), dendrogram = 'none', symm = TRUE,
cexRow = 0.7, cexCol = 0.7, colors = "Greys")
library(igraph)
library(dplyr)
library(ggplot2)
library(d3heatmap)
original_edgelist <- data.frame(From = c("C-1", "C-2", "C-3", "C-4", "C-5", "C-6", "C-7", "C-8", "R-1", "R-1", "R-2", "R-3", "R-4", "R-4", "R-4", "R-5", "R-6", "R-7", "R-8", "R-8", "R-9", "R-9", "R-10", "R-11", "R-11", "A-1", "A-1", "A-1", "A-2", "A-3", "A-3", "A-4", "A-4", "A-4", "A-4", "A-4", "A-4", "A-4", "A-4", "A-4", "A-5", "A-5", "A-6", "A-7", "A-8", "A-9", "A-10", "A-11", "A-12", "A-13", "A-14", "A-15", "A-16", "A-17", "A-18", "A-19", "A-20", "A-20", "A-21", "T-1", "T-2", "T-3", "T-4", "T-5", "T-6", "T-7", "T-8", "T-9", "T-10", "T-11", "T-12", "T-13", "T-14", "T-15"), To = c("R-1", "R-3", "R-4", "R-7", "R-8", "R-9", "R-10", "R-11", "A-1", "A-5", "A-6", "A-17", "A-12", "A-13", "A-14", "A-6", "A-6", "A-11", "A-1", "A-5", "A-1", "A-5", "A-7", "A-1", "A-5", "T-12", "T-13", "T-14", "T-13", "T-3", "T-9", "T-1", "T-2", "T-7", "T-8", "T-10", "T-11", "T-13", "T-14", "T-15", "T-5", "T-13", "T-4", "T-6", "T-13", "T-13", "T-13", "T-13", "T-13", "T-13", "T-13", "T-13", "T-13", "T-13", "T-13", "T-13", "T-13", "T-1", "T-14", "PC", "PC", "PC", "PC", "PC", "PC", "PC", "PC", "PC", "PC", "PC", "PC", "PC", "PC", "PC"))
original_nodelist <- data.frame(Node = c("C-1", "C-2", "C-3", "C-4", "C-5", "C-6", "C-7", "C-8", "R-1", "R-2", "R-3", "R-4", "R-5", "R-6", "R-7", "R-8", "R-9", "R-10", "R-11", "A-1", "A-2", "A-3", "A-4", "A-5", "A-6", "A-7", "A-8", "A-9", "A-10", "A-11", "A-12", "A-13", "A-14", "A-15", "A-16", "A-17", "A-18", "A-19", "A-20", "A-21", "T-1", "T-2", "T-3", "T-4", "T-5", "T-6", "T-7", "T-8", "T-9", "T-10", "T-11", "T-12", "T-13", "T-14", "T-15", "PC"), Level = c("1", "1", "1", "1", "1", "1", "1", "1", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "5"))
# Create iGraph object
graph <- graph.data.frame(original_edgelist, directed = TRUE, vertices = original_nodelist)
# Calculate various network properties, adding them as attributes
# to each node/vertex
V(graph)$comm <- membership(optimal.community(graph))
V(graph)$degree <- degree(graph)
V(graph)$closeness <- centralization.closeness(graph)$res
V(graph)$betweenness <- centralization.betweenness(graph)$res
V(graph)$eigen <- centralization.evcent(graph)$vector
# Re-generate dataframes for both nodes and edges, now containing
# calculated network attributes
node_list <- get.data.frame(graph, what = "vertices")
# Determine a community for each edge. If two nodes belong to the
# same community, label the edge with that community. If not,
# the edge community value is 'NA'
edge_list <- get.data.frame(graph, what = "edges") %>%
inner_join(node_list %>% select(name, comm), by = c("from" = "name")) %>%
inner_join(node_list %>% select(name, comm), by = c("to" = "name")) %>%
mutate(Level = ifelse(comm.x == comm.y, comm.x, NA) %>% factor())
# Create a character vector containing every node name
all_nodes <- sort(node_list$name)
# Adjust the 'to' and 'from' factor levels so they are equal
# to this complete list of node names
plot_data <- edge_list %>% mutate(
to = factor(to, levels = all_nodes),
from = factor(from, levels = all_nodes))
# Create the adjacency matrix plot
ggplot(plot_data, aes(x = from, y = to, fill = Level)) +
geom_raster() +
theme_bw() +
# Because we need the x and y axis to display every node,
# not just the nodes that have connections to each other,
# make sure that ggplot does not drop unused factor levels
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
theme(
# Rotate the x-axis lables so they are legible
axis.text.x = element_text(angle = 270, hjust = 0),
# Force the plot into a square aspect ratio
aspect.ratio = 1,
# Put legend right of plot
legend.position = "right")
# Create a character vector of node names sorted by their
# community membership. Here, I rearrange the node_list
# table by the "comm" variable, then extract the
# "name" vector
name_order <- (node_list %>% arrange(comm))$name
# Reorder edge_list "from" and "to" factor levels based on
# this new name_order
plot_data <- edge_list %>% mutate(
to = factor(to, levels = name_order),
from = factor(from, levels = name_order))
# Now run the ggplot code again
# Override group variable
plot_data$Level <- c("1", "1", "1", "1", "1", "1", "1", "1", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4")
edge_list$Level <- plot_data$Level
# Create a character vector of node names sorted by their
# group membership. Here, I rearrange the node_list
# table by the "Group" variable, then extract the
# "name" vector
name_order <- (node_list %>% arrange(Level))$name
# Reorder edge_list "from" and "to" factor levels based on
# this new name_order
plot_data <- edge_list %>% mutate(
to = factor(to, levels = name_order),
from = factor(from, levels = name_order))
# Now run the d3heatmap
d3heatmap(get.adjacency(graph), dendrogram = 'none', symm = TRUE,
cexRow = 0.7, cexCol = 0.7, colors = "Greys")
shiny::runApp('/Volumes/PAUL GOVAN/Documents/Engineering/DISSERTATION/Apps/RStudio/Inference')
data = rnorm(100000, 3000, 895)
hist(data, main = "", xlab = "Resource A-17", ylab = "Probability", xlim = c(0, 6000), ylim = c(0, 1.8e-03), prob = T, col = 'lightgrey', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25)
lines(density(data, adjust = 2), col = "black", lwd = 2)
data2 = rnorm(100000, 2500, 224)
hist(data2, prob = T, col = 'lightblue', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25, add=T)
lines(density(data2, adjust = 2), col = "blue", lwd = 2)
data3 = rnorm(100000, 4500, 220)
hist(data3, prob = T, col = 'lightcoral', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25, add=T)
lines(density(data3, adjust = 2), col = "red", lwd = 2)
box()
legend(0, 0.0015, c("R-3 = NULL", "R-3 = False", "R-3 = True"), lty = c(1, 1, 1), lwd=c(2, 2, 2),col=c("lightgrey", "lightblue","lightcoral"))
data = rnorm(100000, 3000, 895)
hist(data, main = "", xlab = "Resource A-17", ylab = "Probability", xlim = c(0, 6000), ylim = c(0, 1.8e-03), prob = T, col = '#f0f0f0', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25)
lines(density(data, adjust = 2), col = "#f0f0f0", lwd = 2)
data2 = rnorm(100000, 2500, 224)
hist(data2, prob = T, col = 'lightblue', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25, add=T)
lines(density(data2, adjust = 2), col = "blue", lwd = 2)
data3 = rnorm(100000, 4500, 220)
hist(data3, prob = T, col = 'lightcoral', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25, add=T)
lines(density(data3, adjust = 2), col = "red", lwd = 2)
box()
legend(0, 0.0015, c("R-3 = NUL
legend(0, 0.0015, c("R-3 = NULL", "R-3 = False", "R-3 = True"), lty = c(1, 1, 1), lwd=c(2, 2, 2),col=c("#f0f0f0", "lightblue","lightcoral"))
data = rnorm(100000, 3000, 895)
hist(data, main = "", xlab = "Resource A-17", ylab = "Probability", xlim = c(0, 6000), ylim = c(0, 1.8e-03), prob = T, col = '#f0f0f0', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25)
lines(density(data, adjust = 2), col = "#f0f0f0", lwd = 2)
data2 = rnorm(100000, 2500, 224)
hist(data2, prob = T, col = 'lightblue', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25, add=T)
lines(density(data2, adjust = 2), col = "blue", lwd = 2)
data3 = rnorm(100000, 4500, 220)
hist(data3, prob = T, col = 'lightcoral', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25, add=T)
lines(density(data3, adjust = 2), col = "red", lwd = 2)
box()
legend(0, 0.0015, c("R-3 = NULL", "R-3 = False", "R-3 = True"), lty = c(1, 1, 1), lwd=c(2, 2, 2),col=c("#f0f0f0", "lightblue","lightcoral"))
data = rnorm(100000, 3000, 895)
hist(data, main = "", xlab = "Resource A-17", ylab = "Probability", xlim = c(0, 6000), ylim = c(0, 1.8e-03), prob = T, col = '#f0f0f0', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25)
lines(density(data, adjust = 2), col = "#f0f0f0", lwd = 2)
data2 = rnorm(100000, 2500, 224)
hist(data2, prob = T, col = '#bdbdbd', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25, add=T)
lines(density(data2, adjust = 2), col = "#bdbdbd", lwd = 2)
data3 = rnorm(100000, 4500, 220)
hist(data3, prob = T, col = '#636363', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25, add=T)
lines(density(data3, adjust = 2), col = "#636363", lwd = 2)
box()
legend(0, 0.0015, c("R-3 = NULL", "R-3 = False", "R-3 = True"), lty = c(1, 1, 1), lwd=c(2, 2, 2),col=c("#f0f0f0", "#bdbdbd","#636363"))
data = rnorm(100000, 3000, 895)
hist(data, main = "", xlab = "Resource A-17", ylab = "Probability", xlim = c(0, 6000), ylim = c(0, 1.8e-03), prob = T, col = '#cccccc', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25)
lines(density(data, adjust = 2), col = "#cccccc", lwd = 2)
data2 = rnorm(100000, 2500, 224)
hist(data2, prob = T, col = '#969696', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25, add=T)
lines(density(data2, adjust = 2), col = "#969696", lwd = 2)
data3 = rnorm(100000, 4500, 220)
hist(data3, prob = T, col = '#525252', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25, add=T)
lines(density(data3, adjust = 2), col = "#525252", lwd = 2)
box()
legend(0, 0.0015, c("R-3 = NULL", "R-3 = False", "R-3 = True"), lty = c(1, 1, 1), lwd=c(2, 2, 2),col=c("#cccccc", "#969696","#525252"))
shiny::runApp('/Volumes/PAUL GOVAN/Documents/Engineering/DISSERTATION/Apps/RStudio/Learning')
mu0 = c(2500, 4500)
sigma0 = 250
ybar = c(2250, 4650)
sigma = 160
# You can access the values of the widget (as a vector)
# with input$checkGroup, e.g.
output$myPlot <- renderPlot({
data = rnorm(10000, mu0[1], sigma0)
n=5
mun = (ybar + mu0*(sigma^2/(n*sigma0^2)))/(1+sigma^2/(n*sigma0^2))
sigman2 = (1/(sigma0^2)+n/(sigma^2))^(-1)
sigman = sigman2^(.5)
data2 = rnorm(10000, mun[1], sigman)
n=10
mun = (ybar + mu0*(sigma^2/(n*sigma0^2)))/(1+sigma^2/(n*sigma0^2))
sigman2 = (1/(sigma0^2)+n/(sigma^2))^(-1)
sigman = sigman2^(.5)
data3 = rnorm(10000, mun[1], sigman)
hist(data, main = "", xlab = expression(paste(mu["1"])), ylab = "Probability", xlim = c(2000, 3000), ylim = c(0, 0.008), prob = T, col = '#cccccc', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25)
lines(density(data, adjust = 2), col = "#cccccc", lwd = 2)
hist(data2, prob = T, col = '#969696', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25, add=T)
lines(density(data2, adjust = 2), col = "#969696", lwd = 2)
hist(data3, prob = T, col = '#525252', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25, add=T)
lines(density(data3, adjust = 2), col = "#525252", lwd = 2)
box()
legend(2400, 0.008, c(expression(paste("Prior of ", mu["1"])), expression(paste("Posterior (n = 5)")), expression(paste("Posterior (n = 10)"))), lty = c(1, 1, 1), lwd=c(2, 2, 2),col=c("#cccccc", "#969696","#525252"))
data = rnorm(10000, mu0[2], sigma0)
n=5
mun = (ybar + mu0*(sigma^2/(n*sigma0^2)))/(1+sigma^2/(n*sigma0^2))
sigman2 = (1/(sigma0^2)+n/(sigma^2))^(-1)
sigman = sigman2^(.5)
data2 = rnorm(10000, mun[2], sigman)
n=10
mun = (ybar + mu0*(sigma^2/(n*sigma0^2)))/(1+sigma^2/(n*sigma0^2))
sigman2 = (1/(sigma0^2)+n/(sigma^2))^(-1)
sigman = sigman2^(.5)
data3 = rnorm(10000, mun[2], sigman)
hist(data, main = "", xlab = expression(paste(mu["2"])), ylab = "Probability", xlim = c(4000, 5000), ylim = c(0, 0.008), prob = T, col = '#cccccc', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25)
lines(density(data, adjust = 2), col = "#cccccc", lwd = 2)
hist(data2, prob = T, col = '#969696', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25, add=T)
lines(density(data2, adjust = 2), col = "#969696", lwd = 2)
hist(data3, prob = T, col = '#525252', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25, add=T)
lines(density(data3, adjust = 2), col = "#525252", lwd = 2)
box()
legend(4000, 0.008, c(expression(paste("Prior of ", mu["2"])), expression(paste("Posterior (n = 5)")), expression(paste("Posterior (n = 10)"))), lty = c(1, 1, 1), lwd=c(2, 2, 2),col=c("#cccccc", "#969696","#525252"))
data = rnorm(10000, mu0[2], sigma0)
n=5
mun = (ybar + mu0*(sigma^2/(n*sigma0^2)))/(1+sigma^2/(n*sigma0^2))
sigman2 = (1/(sigma0^2)+n/(sigma^2))^(-1)
sigman = sigman2^(.5)
data2 = rnorm(10000, mun[2], sigman)
n=10
mun = (ybar + mu0*(sigma^2/(n*sigma0^2)))/(1+sigma^2/(n*sigma0^2))
sigman2 = (1/(sigma0^2)+n/(sigma^2))^(-1)
sigman = sigman2^(.5)
data3 = rnorm(10000, mun[2], sigman)
hist(data, main = "", xlab = expression(paste(mu["2"])), ylab = "Probability", xlim = c(4000, 5000), ylim = c(0, 0.008), prob = T, col = '#cccccc', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25)
lines(density(data, adjust = 2), col = "#cccccc", lwd = 2)
hist(data2, prob = T, col = '#969696', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25, add=T)
lines(density(data2, adjust = 2), col = "#969696", lwd = 2)
hist(data3, prob = T, col = '#525252', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25, add=T)
lines(density(data3, adjust = 2), col = "#525252", lwd = 2)
box()
legend(4000, 0.008, c(expression(paste("Prior of ", mu["2"])), expression(paste("Posterior (n = 5)")), expression(paste("Posterior (n = 10)"))), lty = c(1, 1, 1), lwd=c(2, 2, 2),col=c("#cccccc", "#969696","#525252"))
cost = unlist(cost)/1000000
mean(cost)
var(cost)
a_2 = rnorm(1000, 2500, sqrt(600))
a_3 = rnorm(1000, 1800, sqrt(30000))
a_5 = rnorm(1000, 1500, sqrt(22500))
a_8 = rnorm(1000, 1400, sqrt(200))
a_12 = rnorm(1000, 11500, sqrt(1300000))
a_13 = rnorm(1000, 650, sqrt(4200))
a_14 = rnorm(1000, 1300, sqrt(17000))
a_15 = rnorm(1000, 75, sqrt(50))
a_16 = rnorm(1000, 65, sqrt(50))
a_17 = rnorm(1000, 2500, sqrt(50000))
a_18 = rnorm(1000, 4000, sqrt(100000))
a_19 = rnorm(1000, 20, sqrt(5))
a_21 = rnorm(1000, 15000, sqrt(20000))
u_1 = rnorm(1000, 0.1, sqrt(0.0001))
u_4 = rnorm(1000, 0.3, sqrt(0.0008))
u_6 = rnorm(1000, 0.2, sqrt(0.0003))
u_7 = rnorm(1000, 0.3, sqrt(0.0005))
u_9 = rnorm(1000, 0.2, sqrt(0.0002))
u_10 = rnorm(1000, 0.2, sqrt(0.0002))
u_11 = rnorm(1000, 0.02, sqrt(0.0002))
u_20 = rnorm(1000, 0.2, sqrt(0.004))
q_1 = rnorm(1000, 63000, sqrt(400000))
q_4 = rnorm(1000, 12000, sqrt(12000))
q_6 = rnorm(1000, 5500, sqrt(3000))
q_7 = rnorm(1000, 20000, sqrt(40000))
q_9 = rnorm(1000, 4400, sqrt(2000))
q_10 = rnorm(1000, 14000, sqrt(20000))
q_11 = rnorm(1000, 10000, sqrt(10000))
q_20 = rnorm(1000, 20000, sqrt(40000))
a_2 = a_2*1000
a_3 = a_3*1000
a_5 = a_5*1000
a_8 = a_8*1000
a_12 = a_12*1000
a_13 = a_13*1000
a_14 = a_14*1000
a_15 = a_15*1000
a_16 = a_16*1000
a_17 = a_17*1000
a_18 = a_18*1000
a_19 = a_19*1000
a_21 = a_21*1000
u_1 = u_1*1000
u_4 = u_4*1000
u_6 = u_6*1000
u_7 = u_7*1000
u_9 = u_9*1000
u_10 = u_10*1000
u_11 = u_11*1000
u_20 = u_20*1000
a_1 = u_1*q_1
a_4 = u_4*q_4
a_6 = u_6*q_6
a_7 = u_7*q_7
a_9 = u_9*q_9
a_10 = u_10*q_10
a_11 = u_11*q_11
a_20 = u_20*q_20
cost2 = a_1+a_2+a_3+a_4+a_5+a_6+a_7+a_8+a_9+a_10+a_11+a_12+a_13+a_14+a_15+a_16+a_17+a_18+a_19+a_20+a_21
cost2 = cost2/1000000
shinyServer(function(input, output) {
# You can access the values of the widget (as a vector)
# with input$checkGroup, e.g.
output$myPlot <- renderPlot({
hist(cost, main = "", xlab = "Project Cost ($million)", ylab = "Probability", ylim = c(0, 0.18), prob = T, col = 'lightgrey', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25)
lines(density(cost, adjust = 2), col = "black", lwd = 2)
hist(cost2, prob = T, col = 'lightblue', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25, add=T)
lines(density(cost2, adjust = 2), col = "blue", lwd = 2)
box()
legend(95, 0.15, c("Unmitigated", "Mitigated"), lty = c(1, 1), lwd=c(2, 2),col=c("lightgrey", "lightblue"))
})
})
shiny::runApp('/Volumes/PAUL GOVAN/Documents/Engineering/DISSERTATION/Apps/RStudio/Mitigate')
# You can access the values of the widget (as a vector)
# with input$checkGroup, e.g.
output$myPlot <- renderPlot({
hist(cost, main = "", xlab = "Project Cost ($million)", ylab = "Probability", ylim = c(0, 0.18), prob = T, col = 'lightgrey', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25)
lines(density(cost, adjust = 2), col = "black", lwd = 2)
hist(cost2, prob = T, col = 'lightblue', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25, add=T)
lines(density(cost2, adjust = 2), col = "blue", lwd = 2)
box()
legend(95, 0.15, c("Unmitigated", "Mitigated"), lty = c(1, 1), lwd=c(2, 2),col=c("lightgrey", "lightblue"))
# You can access the values of the widget (as a vector)
# with input$checkGroup, e.g.
output$myPlot <- renderPlot({
hist(cost, main = "", xlab = "Project Cost ($million)", ylab = "Probability", ylim = c(0, 0.18), prob = T, col = 'lightgrey', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25)
lines(density(cost, adjust = 2), col = "black", lwd = 2)
hist(cost2, prob = T, col = 'lightblue', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25, add=T)
lines(density(cost2, adjust = 2), col = "blue", lwd = 2)
box()
legend(95, 0.15, c("Unmitigated", "Mitigated"), lty = c(1, 1), lwd=c(2, 2),col=c("lightgrey", "lightblue"))
hist(cost, main = "", xlab = "Project Cost ($million)", ylab = "Probability", ylim = c(0, 0.18), prob = T, col = 'lightgrey', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25)
lines(density(cost, adjust = 2), col = "black", lwd = 2)
hist(cost2, prob = T, col = 'lightblue', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25, add=T)
lines(density(cost2, adjust = 2), col = "blue", lwd = 2)
box()
legend(95, 0.15, c("Unmitigated", "Mitigated"), lty = c(1, 1), lwd=c(2, 2),col=c("lightgrey", "lightblue"))
cost = unlist(cost)/1000000
mean(cost)
var(cost)
a_2 = rnorm(1000, 2500, sqrt(600))
a_3 = rnorm(1000, 1800, sqrt(30000))
a_5 = rnorm(1000, 1500, sqrt(22500))
a_8 = rnorm(1000, 1400, sqrt(200))
a_12 = rnorm(1000, 11500, sqrt(1300000))
a_13 = rnorm(1000, 650, sqrt(4200))
a_14 = rnorm(1000, 1300, sqrt(17000))
a_15 = rnorm(1000, 75, sqrt(50))
a_16 = rnorm(1000, 65, sqrt(50))
a_17 = rnorm(1000, 2500, sqrt(50000))
a_18 = rnorm(1000, 4000, sqrt(100000))
a_19 = rnorm(1000, 20, sqrt(5))
a_21 = rnorm(1000, 15000, sqrt(20000))
u_1 = rnorm(1000, 0.1, sqrt(0.0001))
u_4 = rnorm(1000, 0.3, sqrt(0.0008))
u_6 = rnorm(1000, 0.2, sqrt(0.0003))
u_7 = rnorm(1000, 0.3, sqrt(0.0005))
u_9 = rnorm(1000, 0.2, sqrt(0.0002))
u_10 = rnorm(1000, 0.2, sqrt(0.0002))
u_11 = rnorm(1000, 0.02, sqrt(0.0002))
u_20 = rnorm(1000, 0.2, sqrt(0.004))
q_1 = rnorm(1000, 63000, sqrt(400000))
q_4 = rnorm(1000, 12000, sqrt(12000))
q_6 = rnorm(1000, 5500, sqrt(3000))
q_7 = rnorm(1000, 20000, sqrt(40000))
q_9 = rnorm(1000, 4400, sqrt(2000))
q_10 = rnorm(1000, 14000, sqrt(20000))
q_11 = rnorm(1000, 10000, sqrt(10000))
q_20 = rnorm(1000, 20000, sqrt(40000))
a_2 = a_2*1000
a_3 = a_3*1000
a_5 = a_5*1000
a_8 = a_8*1000
a_12 = a_12*1000
a_13 = a_13*1000
a_14 = a_14*1000
a_15 = a_15*1000
a_16 = a_16*1000
a_17 = a_17*1000
a_18 = a_18*1000
a_19 = a_19*1000
a_21 = a_21*1000
u_1 = u_1*1000
u_4 = u_4*1000
u_6 = u_6*1000
u_7 = u_7*1000
u_9 = u_9*1000
u_10 = u_10*1000
u_11 = u_11*1000
u_20 = u_20*1000
a_1 = u_1*q_1
a_4 = u_4*q_4
a_6 = u_6*q_6
a_7 = u_7*q_7
a_9 = u_9*q_9
a_10 = u_10*q_10
a_11 = u_11*q_11
a_20 = u_20*q_20
cost2 = a_1+a_2+a_3+a_4+a_5+a_6+a_7+a_8+a_9+a_10+a_11+a_12+a_13+a_14+a_15+a_16+a_17+a_18+a_19+a_20+a_21
cost2 = cost2/1000000
hist(cost, main = "", xlab = "Project Cost ($million)", ylab = "Probability", ylim = c(0, 0.18), prob = T, col = 'lightgrey', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25)
lines(density(cost, adjust = 2), col = "black", lwd = 2)
hist(cost2, prob = T, col = 'lightblue', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25, add=T)
lines(density(cost2, adjust = 2), col = "blue", lwd = 2)
box()
legend(95, 0.15, c("Unmitigated", "Mitigated"), lty = c(1, 1), lwd=c(2, 2),col=c("lightgrey", "lightblue"))
cost <- read.table("/Volumes/PAUL GOVAN/Documents/Engineering/DISSERTATION/Apps/RStudio/Mitigate/cost.csv", quote="\"", comment.char="")
View(cost)
cost = unlist(cost)/1000000
mean(cost)
var(cost)
a_2 = rnorm(1000, 2500, sqrt(600))
a_3 = rnorm(1000, 1800, sqrt(30000))
a_5 = rnorm(1000, 1500, sqrt(22500))
a_8 = rnorm(1000, 1400, sqrt(200))
a_12 = rnorm(1000, 11500, sqrt(1300000))
a_13 = rnorm(1000, 650, sqrt(4200))
a_14 = rnorm(1000, 1300, sqrt(17000))
a_15 = rnorm(1000, 75, sqrt(50))
a_16 = rnorm(1000, 65, sqrt(50))
a_17 = rnorm(1000, 2500, sqrt(50000))
a_18 = rnorm(1000, 4000, sqrt(100000))
a_19 = rnorm(1000, 20, sqrt(5))
a_21 = rnorm(1000, 15000, sqrt(20000))
u_1 = rnorm(1000, 0.1, sqrt(0.0001))
u_4 = rnorm(1000, 0.3, sqrt(0.0008))
u_6 = rnorm(1000, 0.2, sqrt(0.0003))
u_7 = rnorm(1000, 0.3, sqrt(0.0005))
u_9 = rnorm(1000, 0.2, sqrt(0.0002))
u_10 = rnorm(1000, 0.2, sqrt(0.0002))
u_11 = rnorm(1000, 0.02, sqrt(0.0002))
u_20 = rnorm(1000, 0.2, sqrt(0.004))
q_1 = rnorm(1000, 63000, sqrt(400000))
q_4 = rnorm(1000, 12000, sqrt(12000))
q_6 = rnorm(1000, 5500, sqrt(3000))
q_7 = rnorm(1000, 20000, sqrt(40000))
q_9 = rnorm(1000, 4400, sqrt(2000))
q_10 = rnorm(1000, 14000, sqrt(20000))
q_11 = rnorm(1000, 10000, sqrt(10000))
q_20 = rnorm(1000, 20000, sqrt(40000))
a_2 = a_2*1000
a_3 = a_3*1000
a_5 = a_5*1000
a_8 = a_8*1000
a_12 = a_12*1000
a_13 = a_13*1000
a_14 = a_14*1000
a_15 = a_15*1000
a_16 = a_16*1000
a_17 = a_17*1000
a_18 = a_18*1000
a_19 = a_19*1000
a_21 = a_21*1000
u_1 = u_1*1000
u_4 = u_4*1000
u_6 = u_6*1000
u_7 = u_7*1000
u_9 = u_9*1000
u_10 = u_10*1000
u_11 = u_11*1000
u_20 = u_20*1000
a_1 = u_1*q_1
a_4 = u_4*q_4
a_6 = u_6*q_6
a_7 = u_7*q_7
a_9 = u_9*q_9
a_10 = u_10*q_10
a_11 = u_11*q_11
a_20 = u_20*q_20
cost2 = a_1+a_2+a_3+a_4+a_5+a_6+a_7+a_8+a_9+a_10+a_11+a_12+a_13+a_14+a_15+a_16+a_17+a_18+a_19+a_20+a_21
cost2 = cost2/1000000
hist(cost, main = "", xlab = "Project Cost ($million)", ylab = "Probability", ylim = c(0, 0.18), prob = T, col = 'lightgrey', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25)
lines(density(cost, adjust = 2), col = "black", lwd = 2)
hist(cost2, prob = T, col = 'lightblue', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25, add=T)
lines(density(cost2, adjust = 2), col = "blue", lwd = 2)
box()
legend(95, 0.15, c("Unmitigated", "Mitigated"), lty = c(1, 1), lwd=c(2, 2),col=c("lightgrey", "lightblue"))
hist(cost, main = "", xlab = "Project Cost ($million)", ylab = "Probability", ylim = c(0, 0.18), prob = T, col = '#bdbdbd', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25)
lines(density(cost, adjust = 2), col = "#bdbdbd", lwd = 2)
hist(cost2, prob = T, col = '#636363', border = 'white', cex.lab = 1.5, cex.main = 1.5, cex.axis = 1.25, add=T)
lines(density(cost2, adjust = 2), col = "#636363", lwd = 2)
box()
legend(95, 0.15, c("Unmitigated", "Mitigated"), lty = c(1, 1), lwd=c(2, 2),col=c("#bdbdbd", "#636363"))
data <- matrix(NA, ncol = 14)
dag <- model2network("[Cause-Delays on other project][Cause-Install scheduled during hurricane season][Risk-vessel delayed on other project|Cause-Delays on other project][Risk-Inclement weather|Cause-Install scheduled during hurricane season][Resource-Transport vessel rate][Resource-2 transport vessels|Risk-Inclement weather][Resource-1 install vessel|Risk-Inclement weather][Resource-Install vessel rate|Risk-vessel delayed on other project][Resource-25 HUC personnel][Resource-HUC personnel rate][Task-Jacket, topsides, pile tow|Resource-Transport vessel rate:Resource-2 transport vessels][Task-Offshore install|Resource-Transport vessel rate:Resource-2 transport vessels:Resource-Install vessel rate:Resource-1 install vessel][Task-HUC|Resource-HUC personnel rate:Resource-25 HUC personnel][Project-Platform install|Task-Jacket, topsides, pile tow:Task-Offshore install:Task-HUC]")
simpleNetwork(data.frame(arcs(dag)), Source = "from", Target = "to",
linkDistance = 100, charge = -400, fontSize = 12,
opacity = 0.8)
library(bnlearn)
library(networkD3)
data <- matrix(NA, ncol = 14)
dag <- model2network("[Cause-Delays on other project][Cause-Install scheduled during hurricane season][Risk-vessel delayed on other project|Cause-Delays on other project][Risk-Inclement weather|Cause-Install scheduled during hurricane season][Resource-Transport vessel rate][Resource-2 transport vessels|Risk-Inclement weather][Resource-1 install vessel|Risk-Inclement weather][Resource-Install vessel rate|Risk-vessel delayed on other project][Resource-25 HUC personnel][Resource-HUC personnel rate][Task-Jacket, topsides, pile tow|Resource-Transport vessel rate:Resource-2 transport vessels][Task-Offshore install|Resource-Transport vessel rate:Resource-2 transport vessels:Resource-Install vessel rate:Resource-1 install vessel][Task-HUC|Resource-HUC personnel rate:Resource-25 HUC personnel][Project-Platform install|Task-Jacket, topsides, pile tow:Task-Offshore install:Task-HUC]")
simpleNetwork(data.frame(arcs(dag)), Source = "from", Target = "to",
linkDistance = 100, charge = -400, fontSize = 12,
opacity = 0.8)
setwd("~/Documents/PRMClass_2016")
library("d3wordcloud")
library("tm")
library("dplyr")
library("viridis")
riskData <- read.csv('RiskRegister.csv', stringsAsFactors = FALSE)
riskCorpus <- Corpus(VectorSource(riskData$Risk))
riskCorpus <- tm_map(riskCorpus, PlainTextDocument)
riskCorpus <- tm_map(riskCorpus, removePunctuation)
riskCorpus <- tm_map(riskCorpus, removeWords, c('based', 'aspect', 'will', '2015', stopwords('english')))
tdm <- TermDocumentMatrix(riskCorpus)
m <- as.matrix(tdm)
v <- sort(rowSums(m), decreasing = TRUE)
d <- data.frame(word = names(v), freq = v)
d <- d %>% tbl_df()
d <- d %>% arrange(desc(freq))
d <- d %>% head(50)
words <- d$word
freqs <- d$freq
d3wordcloud(words, freqs, tooltip = TRUE)
